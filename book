#!/usr/bin/env python

"""
Booking system backend

TODO
  - use objects to manage each database table (room, bed, feature...)
  - pretty print rows in the "show" command
"""

__author__  = "Frederic Culot"
__version__ = "20141105"
__licence__ = "BSD"


import sys
import logging as log
import traceback
import argparse
import sqlite3


#-------------------------------------------------------------------[CmdLine]---

class CmdLine():
    "User input handling class"

    def __init__(self):

        self.command = None
        self.options = None

        parser = argparse.ArgumentParser(
                    description='Home booking system',
                    usage='''book <command> [<options>] (see: book help)''')
        parser.add_argument("command", help='Subcommand to run')
        args = parser.parse_args(sys.argv[1:2])
        self.command = args.command

        if not hasattr(self, args.command):
            print 'Unrecognized command\n'
            print 'Try: book help'
            exit(1)

        getattr(self, self.command)()


    def help(self):
        print '''\
usage: book <command> [<options>]

The available commands are (when marked with *, command is not yet implemented):
  help        Display help text

  add         Add an entity to the booking system
              The available options are:

              -b, --bed <name> <capacity> [room_name] [feature_name]
                  Add a bed, specifying a name for it, the name of
                  the room it resides, its capacity and an optional
                  feature name

              -f, --feature <name> [description]
                  Add a feature, specifying its name and adding an
                  optional description

              -g, --guest <nick> [first_name] [last_name]
                  Add a guest, specifying its nickname, and optional
                  first and last names

              -r, --room <name>
                  Add a room, specifying its name

  *remove*     Remove an entity from the booking system
               The available options are:

               -b, --bed <name>
                   Remove bed called <name>

               -f, --feature <name>
                   Remove feature called <name>

               -g, --guest <nick>
                   Remove guest whose nickname is <nick>

               -r, --room <name>
                   Remove room called <name>

  *register*    Register a guest

  *unregister* Unregister a guest

  *list*      List bookings based on user-provided options
              The available options are: 
            
              -d, --date  <date>
                  Search for the specified date

              -g, --guest <nickname>
                  Search for the specified nickname

              -r, --room  <name>
                  Search for the specified room

  *search*    Search for availabilities

  show        Show entities stored in the booking system.
              If no options are specified then all entities are shown.
              The available options are: 

              -b, --bed
                  Show beds

              -f, --feature
                  Show features
                  
              -g, --guest
                  Show guests

              -r, --room
                  Show rooms
  
  stats       Display statistics about objects stored in database
              The available options are:

              -n, --number
                  Display the number of objects stored in database

  dump        Dump database objects formatted as insert queries


'''

    def add(self):
        parser = argparse.ArgumentParser(description = 'Add an entity to the booking system')
        parser.add_argument("-b", "--bed", nargs = '+')
        parser.add_argument("-f", "--feature", nargs = '+')
        parser.add_argument("-g", "--guest", nargs = '+')
        parser.add_argument("-r", "--room", nargs = 1)
        args = parser.parse_args(sys.argv[2:])
        if not args.bed and not args.feature and not args.guest and not args.room:
            print "At least one option is required!"
            print 'Try: book --help'
            exit(1)
        self.options = args

    def remove(self):
        parser = argparse.ArgumentParser(description = 'Remove an entity from the booking system')
        parser.add_argument("-b", "--bed", nargs = 1)
        parser.add_argument("-f", "--feature", nargs = 1)
        parser.add_argument("-g", "--guest", nargs = 1)
        parser.add_argument("-r", "--room", nargs = 1)
        args = parser.parse_args(sys.argv[2:])
        if not args.bed and not args.feature and not args.guest and not args.room:
            print "At least one option is required!"
            print 'Try: book --help'
            exit(1)
        self.options = args

    def register(self):
        pass

    def unregister(self):
        pass

    def list(self):
        parser = argparse.ArgumentParser(description = 'List bookings based on given options')
        parser.add_argument("-g", "--guest", nargs = 1)
        parser.add_argument("-d", "--date", nargs = 1)
        parser.add_argument("-r", "--room", nargs = 1)
        args = parser.parse_args(sys.argv[2:])
        if not args.guest and not args.date and not args.room:
            print "At least one option is required!"
            print 'Try: book --help'
            exit(1)
        self.options = args

    def search(self):
        pass

    def show(self):
        parser = argparse.ArgumentParser(description = 'Show objects found in the booking systems')
        parser.add_argument("-b", "--bed", action='store_true')
        parser.add_argument("-f", "--feature", action='store_true')
        parser.add_argument("-g", "--guest", action='store_true')
        parser.add_argument("-r", "--room", action='store_true')
        args = parser.parse_args(sys.argv[2:])
        if not args.bed and not args.feature and not args.guest and not args.room:
            args.bed = True
            args.feature = True
            args.guest = True
            args.room = True
        self.options = args
        
    def stats(self):
        parser = argparse.ArgumentParser(description = 'Display statistics about database')
        parser.add_argument("-n", "--number", action='store_true')
        args = parser.parse_args(sys.argv[2:])
        if not args.number:
            print "At least one option is required!"
            print 'Try: book --help'
            exit(1)
        self.options = args
        
    def dump(self):
        pass


#------------------------------------------------------------------[Database]---
class Database():
    "Class to manage interactions with database"

    def __init__(self):
        self.connection = sqlite3.connect('book.db')
        self.connection.row_factory = sqlite3.Row
        try:
            self.sanity_checks()
        except Exception:
            self.create_schema()

    def __enter__(self):
        return self

    def __exit__(self, type, value, traceback):
        self.connection.close()

    def sanity_checks(self):
        cursor = self.connection.cursor()
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='BOOKINGS'")
        if cursor.fetchone() == None:
            log.info('Missing database schema, creating it')
            raise RuntimeError('Missing schema')

    def create_schema(self):
        cursor = self.connection.cursor()
        cursor.executescript('''
            CREATE TABLE ROOMS (ROOM_ID INTEGER PRIMARY KEY,
                                NAME TEXT UNIQUE NOT NULL);
            CREATE UNIQUE INDEX IDX_ROOMS ON ROOMS(NAME);

            CREATE TABLE GUESTS (GUEST_ID INTEGER PRIMARY KEY,
                                 NICKNAME TEXT UNIQUE NOT NULL, 
                                 FIRST_NAME TEXT, 
                                 LAST_NAME TEXT);
            CREATE UNIQUE INDEX IDX_GUESTS ON GUESTS(NICKNAME);

            CREATE TABLE FEATURES (FEATURE_ID INTEGER PRIMARY KEY,
                                   NAME TEXT UNIQUE NOT NULL,
                                   DESC TEXT);
            CREATE UNIQUE INDEX IDX_FEATURES ON FEATURES(NAME);

            CREATE TABLE BEDS (BED_ID INTEGER PRIMARY KEY, 
                               NAME TEXT UNIQUE NOT NULL,
                               CAPACITY INTEGER NOT NULL,
                               FEATURE_ID INTEGER,
                               ROOM_ID INTEGER,
                               FOREIGN KEY(FEATURE_ID) REFERENCES FEATURES(FEATURE_ID),
                               FOREIGN KEY(ROOM_ID) REFERENCES ROOMS(ROOM_ID));
            CREATE UNIQUE INDEX IDX_BEDS ON BEDS(NAME);

            CREATE TABLE BOOKINGS (BOOKING_ID INTEGER PRIMARY KEY,
                                   GUEST_ID INTEGER NOT NULL,
                                   BED_ID INTEGER NOT NULL,
                                   DATE TEXT NOT NULL,
                                   FOREIGN KEY(GUEST_ID) REFERENCES GUESTS(GUEST_ID),
                                   FOREIGN KEY(BED_ID) REFERENCES BEDS(BED_ID));
            CREATE UNIQUE INDEX IDX_BOOKINGS ON BOOKINGS(GUEST_ID, BED_ID, DATE);
        ''')

    def add_room(self, name):
        log.info('Adding room [%s] to the database', name)
        cursor = self.connection.cursor()
        cursor.execute("INSERT INTO ROOMS (NAME) VALUES (:ROOM_NAME)", {"ROOM_NAME": name})
        self.connection.commit()

    def add_feature(self, name, desc = None):
        log.info('Adding feature [%s] to the database', name)
        cursor = self.connection.cursor()
        cursor.execute("INSERT INTO FEATURES (NAME, DESC) VALUES (:FEATURE_NAME,:FEATURE_DESC)",
                {"FEATURE_NAME": name, "FEATURE_DESC": desc})
        self.connection.commit()

    def add_guest(self, nick, first_name = None, last_name = None):
        log.info('Adding guest [%s] to the database', nick)
        cursor = self.connection.cursor()
        cursor.execute("INSERT INTO GUESTS (NICKNAME, FIRST_NAME, LAST_NAME) VALUES (:NICKNAME,:FIRST_NAME,:LAST_NAME)",
                {"NICKNAME": nick, "FIRST_NAME": first_name, "LAST_NAME": last_name})
        self.connection.commit()

    def add_bed(self, name, capacity, room = None, feature = None):
        log.info('Adding bed [%s] to the database', name)
        cursor = self.connection.cursor()
        # First check that the room and feature exists and fetch the corresponding ids
        room_id = None
        feature_id = None
        if room:
            cursor.execute("SELECT ROOM_ID FROM ROOMS WHERE NAME=:NAME",{"NAME": room})
            room_id = cursor.fetchone()
            if room_id == None:
                print "Room [%s] does not exist!" % room
                exit(1)
            room_id = room_id["ROOM_ID"]
        if feature:
            cursor.execute("SELECT * FROM FEATURES WHERE NAME=:NAME",{"NAME": feature})
            feature_id = cursor.fetchone()
            if feature_id == None:
                print "Feature [%s] does not exist!" % feature
                exit(1)
            feature_id = feature_id["FEATURE_ID"]
        cursor.execute("INSERT INTO BEDS (NAME,CAPACITY,FEATURE_ID,ROOM_ID) VALUES (:NAME,:CAPACITY,:FEATURE,:ROOM)",{"NAME":name,"CAPACITY":capacity,"FEATURE":feature_id,"ROOM":room_id})
        self.connection.commit()
        
    def list_room(self, name):
        log.info('Listing bookings for room [%s]', name)
        cursor = self.connection.cursor()
        query = '''
            select * from BOOKINGS where BED_ID in (
                select BED_ID from BEDS where ROOM_ID = (select ROOM_ID from ROOMS where NAME=:ROOM_NAME)
            )'''
        cursor.execute(query,{"ROOM_NAME": name})
        rows = cursor.fetchall()
        for row in rows:
            print "Room id: %d, Room name: %s" % (row["ROOM_ID"], row["NAME"])

    def show_entity(self, entity):
        print "%s:" % entity
        cursor = self.connection.cursor()
        query = "select * from '%s'" % entity
        cursor.execute(query)
        rows = cursor.fetchall()
        for row in rows:
            print "\t",
            print row
        print "\n"
        
    def stats_number(self):
        log.info('Gathering database statistics')
        cursor = self.connection.cursor()
        cursor.execute("select name from sqlite_master where type='table'")
        rows = cursor.fetchall()
        for row in rows:
            table = row["NAME"]
            query = "select count(*) as NUM from '%s'" % table
            cursor.execute(query)
            count = cursor.fetchone()
            print "%s | %d" % (table, count["NUM"])

        
    def dump(self):
        for line in self.connection.iterdump():
            print "%s\n" % line


#----------------------------------------------------------------[Processing]---

class Processing():
    "Class that contains all processing-related methods"

    @staticmethod
    def command_help(options):
        pass

    @staticmethod
    def command_add(options):
        if options.room:
            room_name = options.room[0]
            with Database() as db:
                db.add_room(room_name)

        if options.bed:
            if len(options.bed) < 2:
                print "At least 2 options are required to register a bed"
                print 'Try: book help'
                exit(1)
            bed_name = options.bed[0]
            bed_capacity = options.bed[1]
            bed_room = options.bed[2] if len(options.bed) >= 3 else None
            bed_feature = options.bed[3] if len(options.bed) == 4 else None
            with Database() as db:
                db.add_bed(bed_name, bed_capacity, bed_room, bed_feature)

        if options.feature:
            feature_name = options.feature[0]
            feature_desc = options.feature[1] if len(options.feature) == 2 else None
            with Database() as db:
                db.add_feature(feature_name, feature_desc)

        if options.guest:
            guest_nick = options.guest[0]
            guest_firstname = None
            guest_lastname = None
            guest_firstname = options.guest[1] if len(options.guest) >= 2 else None
            guest_lastname = options.guest[2] if len(options.guest) == 3 else None
            with Database() as db:
                db.add_guest(guest_nick, guest_firstname, guest_lastname)

    @staticmethod
    def command_remove(options):
        pass        
        
    @staticmethod
    def command_list(options):
        if options.room:
            room_name = options.room[0]
            with Database() as db:
                db.list_room(room_name)

    @staticmethod
    def command_show(options):
        if options.bed:
            with Database() as db:
                db.show_entity("BEDS")            
        if options.feature:
            with Database() as db:
                db.show_entity("FEATURES")
        if options.guest:
            with Database() as db:
                db.show_entity("GUESTS")
        if options.room:
            with Database() as db:
                db.show_entity("ROOMS")
            
    @staticmethod
    def command_stats(options):
        if options.number:
            with Database() as db:
                db.stats_number()
    
    @staticmethod
    def command_dump(options):
        with Database() as db:
            db.dump()


#----------------------------------------------------------------------[Main]---

def main():
    cmdline = CmdLine()
    if cmdline.command:
        getattr(Processing(), "command_" + cmdline.command)(cmdline.options)


if __name__ == '__main__':
    try:
        log.basicConfig(level=log.DEBUG,
                        format='%(asctime)s %(levelname)-8s %(message)s',
                        datefmt='%m-%d %H:%M',
                        filename='book.log')
        main()
    except SystemExit:
        pass
    except Exception, e:
        log.exception(e)
        traceback.print_exc()
